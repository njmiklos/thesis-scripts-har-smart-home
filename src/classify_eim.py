"""
This is based on "classify.py" from https://github.com/edgeimpulse/linux-sdk-python/tree/master/examples/custom

It expects "runner.py" from https://github.com/edgeimpulse/linux-sdk-python/tree/master/edge_impulse_linux 
as "edge_impulse_runner.py" in the same directory ("src").
"""
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple

from get_env import get_input_path, get_output_path
from edge_impulse_runner import ImpulseRunner


def load_model(model_file_path: Path) -> ImpulseRunner:
    """
    Loads an Edge Impulse model from a .eim file.

    Args:
        model_file_path (Path): Path to the .eim model file.

    Returns:
        ImpulseRunner: Initialized runner for classification tasks.
    """
    print(f'Loading model from {model_file_path}...')
    model_file_path_str = str(model_file_path)
    runner = ImpulseRunner(model_file_path_str)

    model_info = runner.init()
    # model_info = runner.init(debug=True) # to get debug print out
    model_owner = model_info['project']['owner']
    model_name = model_info['project']['name']
    print(f'Loaded {model_owner}\'s runner \"{model_name}\".')

    return runner

def parse_data(window: str) -> List[float]:
    """
    Parses and converts a comma-separated feature window string into a list of floats
    for a classification with an *.eim model.

    Args:
        window (str): Comma-separated string of features.

    Returns:
        List[float]: List of feature values as floats.
    """
    features = window.strip().split(',')

    if '0x' in features[0]:
        features = [float(int(f, 16)) for f in features]
    else:
        features = [float(f) for f in features]
    
    return features

def classify_window(loaded_model: ImpulseRunner, feature_window: List[float]) -> Dict[str, Any]:
    """
    Performs classification on a window of data using a loaded model.

    Args:
        loaded_model (ImpulseRunner): The initialized model for classification.
        feature_window (List[float]): A list of floats with data to classify.

    Returns:
        Dict[str, Any]: Classification result and metadata.
    """
    classification_result = loaded_model.classify(feature_window)
    return classification_result

def normalize_probability(probability: float) -> float:
    """
    Normalizes the probability value to ensure it is between 0 and 1.

    Args:
        probability (float): Raw probability value.

    Returns:
        float: Normalized probability rounded to 4 decimal places.
    """
    if probability > 1 or probability < 0:
        probability = 0.0
    else:
        probability = round(probability, 4)
    return probability

def get_top_prediction(classification_result: Dict[str, Any]) -> Tuple[str, float]:
    """
    Gets the class with the highest probability from a classificiation result.

    Args:
        classification_result (Dict[str, Any]): Classification output from the model.

    Returns:
        Tuple[str, float]: (class_name, probability)
    """
    classification = classification_result['result']['classification']
    cls_highest = ''
    probability_highest = 0.0
    for cls, probability in classification.items():
        probability = normalize_probability(probability)
        if probability >= probability_highest:
            cls_highest = cls
            probability_highest = probability

    return cls_highest, probability_highest

def print_classification_summary(classification_result: Dict[str, Any]) -> None:
    """
    Prints the classification result in a human-readable format.

    Args:
        classified_window (Dict[str, Any]): Output from `ImpulseRunner.classify()`.
    """
    classification = classification_result['result']
    timing = classification_result['timing']

    print('Classification:')
    for cls, probability in classification['classification'].items():
        probability = normalize_probability(probability)
        print(f'- {cls}: {probability}')

    print('Timing:')
    print(timing)

def close_loaded_model(loaded_model: Optional[ImpulseRunner]) -> None:
    """
    Stops and cleans up the loaded model if it exists.

    Args:
        loaded_model (ImpulseRunner | None): The loaded model runner to stop.
    """
    if loaded_model:
        loaded_model.stop()


if __name__ == '__main__':
    # Paths
    input_dir_path = get_input_path()
    model_file_path = input_dir_path / 'single-model-approach-linux-x86_64-v5.eim'
    output_dir_path = get_output_path()
    output_dir_path.mkdir(parents=True, exist_ok=True)

    # Some txt window data
    data = '''
    64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 37.5500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 38.3000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 37.6500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 37.0000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 37.0500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 37.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 38.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 39.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 39.6000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 40.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0300, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 41.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0150, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 42.3000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 41.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 40.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 39.9000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 39.7000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 39.2500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 38.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 38.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 38.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 40.0500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 41.3000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.5000, 40.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 40.3000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 42.4500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 44.6000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 45.7500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 46.9000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 49.2500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 51.6000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 46.7500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 41.9000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 39.0000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.9000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.7000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.7500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.6500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.5000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.4000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 37.3000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.5500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.9000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.0000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.4000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.1500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.5000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 36.0000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.5000, 36.5000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 36.0500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.6000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.4000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.0500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 34.9000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.0500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 967.0000, 35.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 968.0000, 35.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.5000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.5000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.2500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.3000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.2000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.1000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.4500, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.8000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.6000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.4000, 22.0000, 64.4653, 0.0800, 0.0000, 20.0000, 56.5125, 0.0000, 0.0000, 20.6900, 60.4248, 0.2400, 0.0000, 19.9100, 969.0000, 35.4500, 22.0000
    '''

    # Run classification pipeline
    loaded_model = load_model(model_file_path)
    feature_window = parse_data(data)
    classification_result = classify_window(loaded_model, feature_window)
    print_classification_summary(classification_result)
    print(f'Highest scored class: {get_top_prediction(classification_result)}')
    close_loaded_model(loaded_model)